syntax = "proto3";

package e2e.cats;

import "scalapb/validate.proto";
import "validate/validate.proto";
import "scalapb/scalapb.proto";

enum Color {
  DEFAULT = 0;
  RED = 1;
  GREEN = 2;
  BLUE = 3;
}

message SubMsg {
  int32 a = 1;
}

message NonEmptyTypes {
  option (scalapb.message) = {
    [scalapb.validate.message] {
      validate_at_construction: true
    }
  };
  repeated string set   = 1 [(validate.rules).repeated = { unique: true }];
  repeated string non_empty_set   = 2 [(validate.rules).repeated = { min_items: 1, unique: true }];
  repeated string non_empty_list  = 3 [(validate.rules).repeated = { min_items: 1 }];
  map<int32, int32> non_empty_map = 4 [(validate.rules).map = { min_pairs: 1 }];
  string foo = 5 [(validate.rules).string = {max_len: 3 }];
}

message NonEmptyTypesWithSubRules {
  repeated string non_empty_set   = 1 [
    (validate.rules).repeated = { min_items: 1, unique: true, items: {string: {len: 5}}}
  ];
  repeated string non_empty_list  = 2 [
    (validate.rules).repeated = { min_items: 1, items: {string: {len: 5}} }];
  map<int32, int32> non_empty_map = 3 [
    (validate.rules).map = { min_pairs: 1, keys: {int32: {gte: 4}}, values: {int32: {gte: 5}}}
  ];
}

// This message is matching NonEmptyTypes, but allows us to create invalid instances such as sets
// with duplicate elements.
message NonEmptyTypesTesting {
  repeated string set = 1;
  repeated string non_empty_set = 2;
  repeated string non_empty_list = 3;
  map<int32, int32> non_empty_map = 4;
  string foo = 5;
}