
syntax = "proto3";

package scalapb.transforms.refined;

import "validate/validate.proto";
import "scalapb/validate.proto";
import "scalapb/scalapb.proto";

option (scalapb.options) = {
  preprocessors : [ "scalapb-validate-preprocessor" ]
  import : "eu.timepit.refined.api.Refined"
  import : "eu.timepit.refined.numeric._"
  import : "eu.timepit.refined.generic._"
  import : "shapeless.{Witness => W}"
};

option (scalapb.validate.package) = {
  field_transformations : [ {
    when : {int32 : {gt : 1}}
    set : {type : "Int Refined Greater[W.`$(int32.gt)`.T]"}
    match_type : PRESENCE
  } ]

  field_transformations : [ {
    when : {int32 : {const : 1}}
    set : {type : "Int Refined Equal[W.`$(int32.const)`.T]"}
    match_type : PRESENCE
  } ]

  field_transformations : [ {
    when : {double : {gt : 1, lte: 1}}
    set : {type : "Double Refined Interval.OpenClosed[W.`$(double.gt)`.T, W.`$(double.lte)`.T]"}
    match_type : PRESENCE
  } ]

  field_transformations : [ {
    when : {enum : {const: 1}}
    set : {type : "Equal[$(.type). Double Refined Interval.OpenClosed[W.`$(double.gt)`.T, W.`$(double.lte)`.T]"}
    match_type : PRESENCE
  } ]

};

message RefinedTest {
  int32 gt5 = 1 [ (.validate.rules).int32 = {gt : 5} ];
  int32 constant = 2 [ (.validate.rules).int32 = {const : 17} ];
  double oc = 3 [ (.validate.rules).double = {gt : 0, lte: 100} ];
}

message FreeMessage {
  int32 gt5 = 1;
  int32 constant = 2;
  double oc = 3;
}